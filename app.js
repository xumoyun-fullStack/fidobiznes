const db = require("oracledb");

//set birth date for use

//const date = new Date();

// date.setDate(11);
// date.setMonth(8);
// date.setFullYear(2001)

db.outFormat = db.OUT_FORMAT_OBJECT;

module.exports.create_database = async function(){
    let connection;
    try{
        connection = await db.getConnection({
            user: "system",
            password: 'pass1',
            connectString: "localhost/xe"
        })

        await connection.execute(`CREATE TABLE clients(
            id NUMBER GENERATED BY DEFAULT AS IDENTITY,
            name VARCHAR(50) NOT NULL,
            surname VARCHAR(50) NOT NULL,
            age VARCHAR(3) NOT NULL,
            birth_date DATE NOT NULL,
            created_date DATE DEFAULT(CURRENT_DATE),
            modified_date DATE,
            PRIMARY KEY(id)
        )`)
       
            
        await connection.execute(`COMMIT WORK`)

    }catch(e){
        console.log(e);
    }
}

module.exports.add_client = async function (name, surname, birth_date, age){
    let connection
    try{
        connection = await db.getConnection({
            user: "system",
            password: 'pass1',
            connectString: "localhost/xe"
        })
       
       let year = birth_date.getFullYear();
       let month = birth_date.getMonth();
       let day = birth_date.getDate();

        let result = await connection.execute(
            `INSERT INTO clients(name, surname, birth_date, age) VALUES( '${name}','${surname}', to_date('${year}-${month}-${day}', 'YYYY-MM-DD'), '${age}')`
            )
        
        result = await connection.execute(`select * from clients`)

        connection.execute(`COMMIT WORK`)
        console.log(result)

        return ({
            msg: 'added',
            rows: result.rows
        });

    }catch(e){
        console.log(e)
    }
}

module.exports.edit_client = async function (id, name, surname, birth_date, age){
    let connection;
    try{
        connection = await db.getConnection({
            user: "system",
            password: 'pass1',
            connectString: "localhost/xe"
        })

        let client = await connection.execute(`SELECT * FROM clients WHERE id=${id}`)
        if(client.rows.length === 0) throw new Error("this client not found!")

        let year = birth_date.getFullYear();
        let month = birth_date.getMonth();
        let day = birth_date.getDate();

        await connection.execute(`UPDATE clients SET name='${name}', surname='${surname}', birth_date=to_date('${year}-${month}-${day}', 'YYYY-MM-DD'), age='${age}' `)

        let clients = await connection.execute(`SELECT * FROM clients`)

        console.log(clients);
        
        return ({
            msg: 'updated',
            clients: clients.rows
        })

    }catch(e){
        console.log(e)
    }
}

module.exports.delete_client = async function(id){
    let connection;

    try{
        connection = await db.getConnection({
            user: "system",
            password: 'pass1',
            connectString: "localhost/xe"
        })

        let client = await connection.execute(`SELECT * FROM clients WHERE id=${id}`)
        if(client.rows.length === 0) throw new Error("this client not found!")

        await connection.execute(`DELETE FROM clients WHERE id=${id}`);

        let clients = await connection.execute(`SELECT * FROM clients`)

        console.log(clients);
        
        return ({
            msg: 'deleted',
            clients: clients.rows
        })

    }catch(e){
        console.log(e);
    }
}

module.exports.get_element_by_id = async function(id){
    let connection;

    try{
        connection = await db.getConnection({
            user: "system",
            password: 'pass1',
            connectString: "localhost/xe"
        })

        let client = await connection.execute(`SELECT * FROM clients WHERE id=${id}`)
        if(client.rows.length === 0) throw new Error("this client not found!")
        
        console.log(client)

        return({
            row: client.rows
        })
        
    }catch(e){
        console.log(e);
    }
}